Introduction

Introduction

Hi this is Craig Shoemaker and I'm excited about your journey in learning jQuery. Building modern interactive websites can be a lot of fun and even more satisfying when you stay productive by leveraging a rock solid library, like jQuery. In this course, you'll learn what you need to get started with jQuery, as well as walk away with the foundation that you need to continue your learning with other courses. As a first step, let's begin with a short preview of what's to come in jQuery: Getting Started.

Course Preview

In this course, you'll learn about the code and concepts that you need to use jQuery effectively. We'll start off by taking a look at the venerated Hello World code example, and then move on to some more detailed examples. Sitting in the context of a real world page, most of the examples are run right against this page Coded Homes. It's a fictitious real estate site that I use in Pluralsight courses. Using this example will interact with the page in a lot of different ways, giving you a chance to see jQuery in action in the real world context. Everything you need to master the content in this course is available at your fingertips. As you can see on this page, the Content tab shows how the page renders in the browser. The HTML tag exposes the HTML just for the Coded Homes example. As this page uses Bootstrap, most of the styling for the page is taken care of by the Bootstrap framework. But custom styles for the examples are all available behind the CSS tab as well. If you're interested in Bootstrap, make sure you check out the Pluralsight library for our excellent courses on the subject. While you may hear me mention it at times, understanding Bootstrap is not a prerequisite for this course. Then there's the JavaScript tab. Here you have all the code examples used throughout the entire course, and you'll see much more of these examples soon. Finally, the Resources page includes all the detail about jQuery that you need to get started. So with this course, I take you step by step from the very beginning, and take you to a position of not only mastering the examples found in this course, but also placing you in a position of being able to continue your learning by helping you establish a solid understanding of the basics of jQuery. So as you can tell, I'm excited about jQuery. But to get a sense of its value, let's take a look at what development might look like without jQuery.

Life Without jQuery

Now as you're about to see, one of the most significant benefits to working with jQuery is its ability to find and manipulate parts of a page. So let's start off by taking a look at the street address. So 15509 Main Street, we go over to the HTML tab, you'll see all of the markup that's used in order to create this sample page. So as we scroll down, you'll notice that here is an h2 element. It has a class of expanded added to it, and then there's the text of the h2. So if we go back over to the address here, and inspect the element, and we take off expanded, you'll notice how the characters go closer together, because we're setting the letter-spacing to 2.5 pixels. So what would the JavaScript look like for us to add a class and remove a class to that element just using basic, raw JavaScript. Well, let's take a look at that. The first thing that we'll need to do is access that h2 element on the page. Now since this returns an array of all the elements on the page that it found, we need to use that array in order to make changes to the properties of a specific element. So what we'll do here is use the 0 index to get into this item in the array. So here you have h2, index of 0, and then what we'll do is concatenate on the highlight class to className on that element. If we go over and take a look at the CSS that's applied to this page, you'll see that the highlight class sets background-color to a yellow color. And I'm using += here because if you recall, that expanded class is already applied to the h2, and I want to make sure I keep that and not just override it by setting a value to className. So let's evaluate this statement. And so now you'll see that the className is set to expanded and highlight. So when we take a look at the content itself, you can see that the element as both of the classes applied to it, so it's highlighted in yellow here. Now that wasn't so bad to add a class to the element, but what would it look like if we want to remove just the highlight class? So to remove the highlight class, what we'll want to do is get a reference to all of the classes that are applied to an element, remove the specific one that we want, and then take that array and join it back up, so that only the class that we want is applied to that element. So let's start first by getting a list of all the classNames. So here you can see the classNames array has expanded and highlight in it, and it got those values because I called split by passing in a space against the className to that element. So now what we need to do is remove from the array the one that we don't want. The call to splice just returns the item that you're removing. So classNames only has expanded in that list, and so now what we need to do is join up the list and set it equal to the className of the element. And so I'm doing just that, I'm joining classNames on space, there's no space, so now className is set to just expanded. And you'll notice here that the highlight is now taken off that item. Now, that was quite a bit of work just to add and remove some classes to an element. But in jQuery this gets ridiculously simple.

Using jQuery

Now, you've just had an opportunity to see what it looks like to add and remove a class from an element using straight JavaScript. So now what I'd like to do is show you how much easier it is to do it with jQuery. So the first thing we'll do is start off with a selector. So what I'm looking at here, is I want to narrow down to the h2 on the page, and then what I'd like to do is add the class of highlight. So here I'm calling addClass, and I'll pass in the name of the class, which is highlight, and once I execute this statement, you'll notice that the element is now highlighted. Now, that was pretty easy. If we want to remove the class, all we need to do is change this call to removeClass. And as I execute removeClass, that class is now gone from the element. So this barely scratches the surface, but this gives you a glimpse of the value of using jQuery in your web applications.

Value of jQuery

More than just having the huge benefits of having a simple and expressive API to work with the DOM, like you just saw on the last two demos, jQuery's origin emerges from the context of the browser wars of the late 1990s. Beyond just making the DOM easy to work with, jQuery set out to be a layer on top of web browsers of the day. This layer is meant to work around any known issues of browsers that didn't behave correctly. Some might say that browser inconsistencies are much less of an issue in an era of modern web development, but that's simply not true. When you visit the link shown in this slide, you're taken to the latest version of the official document, which maintains a description of all the current jQuery browser bug workarounds. Nineteen pages. Today in mid 2015, this document is 19 pages long. Now to be fair, the document does include code snippets, but still, 19 pages. So when the jQuery team says you use it to write less and do more, well, they mean it.

Developer Tools

Now as I introduced to you earlier in the course, this is the sample application that I've written that accompanies this course. And all this really is, is a webpage that's running within Google Chrome, I just have it setup to go full screen. So I can take it out of full screen, and you can see here that it's just a standard webpage, and most of the code that I'll be writing will be done here with the developer tools window. And this is just the console of the developer tools. So usually by pressing F12 or Control + Shift + I, you can open and close the developer tools, and by using this button over here, you can decide if you want it at the bottom, or if you want to orient it to the side of the page. So, I'll keep it at full screen, just because it looks nicer and it's less UI clutter for you as you're watching the course, and I like to use the console, because as I type the code and execute it, it's immediately applied to the page. So don't be fooled, as we're going along, it's just a webpage running in a browser using the developer tools.

Course Repository

The final thing I want you to know about before we proceed is that I've created a GitHub repository, which includes the resources and information about the course. I'll update this repository should the course be updated or you need to know any further details surrounding the course. Now, the code for the samples, as you see in the course, won't be in this repository, as you need to have a paid account to access the code via Pluralsight.com. But this repository will make sure that you stay updated during the life of the course.

Summary

In summary, you've learned about the easy and expressive API found in jQuery, and you also learned about how jQuery is an abstraction layer on top of many different browsers. And you saw how to use the code and samples available in this course. In the next module, the fun really begins as you learn about the anatomy of a jQuery command. Let's get to it.

Anatomy of a jQuery Command

Introduction

Code can be cryptic at times, almost like we're speaking in, well, code. Well, this module is all about demystifying the jQuery syntax, so that as you continue to learn more about jQuery, even beyond this introductory course, you'll have all you need to decipher unfamiliar code. So, let's start by taking a look at a few of the simplest jQuery statements possible. Ah, the venerated Hello World demo. As you can see, when executed in the browser, the code prints hello world in the console. But there might be some things you consider strange going on here, so let's take a look at this code piece by piece.

Hello World

So, first there's this dollar sign. And you're probably wondering what the significance of that is. And then there's this function declaration, and you might be saying to yourself, well, it seems a bit strange, it's sort of just sitting there. Well, then there's console.log. Now this might be the only part that seems familiar to you from your previous work with JavaScript. And then we've got this curly brace, and parenthesis, and semicolon all on their own here. Well, trust me, everything here is for a reason. So let's begin with the dollar sign. The dollar sign in jQuery is just a shortcut variable to jQuery itself. Think of this as the front door. Everything you do in jQuery starts with the dollar sign. The jQuery library is actually declared in a variable called jQuery. So you could write the statement like this, but having to write and read that word jQuery over and over again, and trust me, you'll be writing statements like this a lot, is just a bit cumbersome. So, the shortcut of the dollar sign makes things much easier. And it points to jQuery itself. In fact, I can even show you. If you start to poke around in the jQuery source code, you can see how the jQuery variable is defined. And you'll see how we use those parameters of selector and context in coming demonstrations. But as you scroll down the file a little bit further, the global $ variable and the global jQuery variable is set equal to the local jQuery variable. And all that is to say, is that the $ variable is equal to jQuery itself. Now, let's go back to that code snippet we started with, and take a look at it piece by piece. The dollar sign, as you now know, is the shortcut for jQuery. This variable doesn't just hold a static value, but it's actually a function. So a jQuery statement runs the function. This adds the open and close parentheses and is terminated by a semicolon. The close parenthesis and the semicolon end up wrapping around on a few lines below, so when you see them just hanging there, they're there on purpose to complete the statements. Now this by itself doesn't do anything, so an anonymous function is needed. This function is called anonymous, because there's no name assigned to the function, it's just there, and poised to run after the jQuery statement executes. When the function is run, whatever statements that are inside the function, those run. So here the message, hello world, is logged to the console. While writing to the console isn't really all that interesting, what you're looking at is really one of the most famous jQuery commands, the jQuery ready function. This function is implemented on nearly every page that uses jQuery, because the function runs after the jQuery script itself is loaded and the web browser's DOM, or document object model, or all the elements of the page, are loaded and ready for you to manipulate and interact with via jQuery. So, like I said, this is one of the most basic commands available, but most of the time you'll be trying to select something on the page first. So now let's take a look how we can access all the divs on a page.

Thinking in Sets

So this is the example page that we'll be using for many of the demos found in this course. So let's just take a look around for a quick moment and then we can start working with jQuery. So if we go in and take a look at the HTML associated with this page, you'll notice that there's a number of different elements available. So you'll see that we have a few divs defined in the page here, and then down here, you'll notice that there's an h2 defined for the address, and that has the expanded class on it, and that's the street address for our home here within Coded Homes. So there are a number of different elements available, but specifically we'll be looking at the divs and the h2 for this example. So let's return now over to the visual representation of the page, and what I'd like to do is use a jQuery command to find all the divs that are on a page. And so I'll do that by first declaring a variable. And then I'll use my jQuery command of $, and then pass in the element that I'm looking for, so in this case, it's a div. And so when I run this, what it will do is return to me a list of all the divs on the page. So you'll see here, this is quite an extensive array of divs. Now one of the first things that you'll notice by the returned value, is this open bracket right here. And what this tells you is that this is an array of elements. And so what it's doing when jQuery selects something on the page, it returns a set, or it returns an array of those items. So you'll notice I have divs here on the entire page, everything from the navigation bar of the page itself, all the way down into divs individual for the layout of the page. So even though you may be attempting to select a single item on the page, when you select something, you are going to get back a set. And so, if we take a look at the selector that I use at the top here, again you'll notice the $ here, this is the gateway, or the front door to jQuery, and that I passed in a very simple selector saying that all I want are the div elements on the page. And so the result of that, again, is this set of all the divs that are available on the page. So one of the things that you can do-- let's clear this for a moment-- to see whether or not you have something returned from the selector that you provided, is take a look at your result, so in this case, I have the divs variable, and I can inspect its length. So here you can see that there are 66 divs on the page. So that's one of the first techniques that you can use as you run a selector if you want to find out if you've returned a result, you can take a look at the length property. Now, what if there's only one item that matches your selector? Well, that'll work just as well also. So I'll clear this once again, and now let's try to find the h2s. So once again, I have a result here, but I just have an array with one item, because there's only one h2 defined on the page. And, of course, if I take a look at the length, I'll get back 1 for that. But if I run another jQuery function against my wrapped set, and that's what this is called is a wrapped set of jQuery objects, against either h2s or my divs variable, they'll behave in a similar way. So, since I'm only returning 1 item in the h2s, if I decide to change some of the CSS properties, or change some of the text in that item, and I'll show you how to do that in coming demos, since I only have 1 item in the wrap set, it'll only execute against that one item. But if I want to do it against all 66 of the items in my divs variable, it will execute against all of those items. So the takeaway for you here is that most often with just about any jQuery statement that you build, the first part of it will be the selector. And I'll show you a number of different types of selectors. In this case, all I'm doing is selecting defined HTML elements, either div or h2, and there's more complex ways that you can do your selectors. But the first thing that you'll want to do is tell jQuery what it is you're looking for on the page, and you do that with a selector. So that works great. But what happens if you try to select something that doesn't exist? Well, we'll take a look at that next. Now jQuery is also very forgiving.

Working with Non-matches

If you try to pass something into selector that doesn't match or doesn't even exist, you might think it would throw an error, but in fact, it does not. So let's try this for a moment. Let's try to put in a selector for an element that does not exist anywhere in HTML. So here we can take a look at the result of that selection, and that's simply an empty array. So again, we could take a look at nomatch.length, and that will return 0. So as you're using the results of a selection, you can take a look at the length property to find out if you've found what you're looking for as you're interrogating the page. And even if you don't find something or even if you pass in something that doesn't exist within the page, instead of returning an error, what you get is an empty array. So that makes it very easy for you to write code that doesn't throw errors when you don't want it to by making sure that you're looking for things like length against your selections. Okay, so now that we've figured out how to select something on the page, let's take a look at what we do once we have something selected.

Getter and Setter Functions

Now once you have a set, a selected set of elements on the page, there are a number of different functions that you can use in order to interact with the elements that have been selected. So let's turn our attention again to the h2 on the page, but this time what I'd like to be able to do is run the text function against that selection. And so now when I take a look at text, you can see that's the value that's inside that h2. We take a look at the markup, and scroll down here, that's the text inside the h2 itself. Now, we can use that function in a little bit of a different way. Let's say I want to change the text that shows up on the page here, I can use the very same function, but instead of simply calling the function, I can pass in a value as the first argument to that function, and that will change the text within that item. So here, let's take a look at doing that a little bit differently. So let's select the h2 once again, and call text, but this time, I'll change the street address. So notice over on the page, 1234 Main Street is now what shows up on the page. And I did that by calling text and passing in the value that I want. So, many functions that are available off of a selected set of a jQuery selection, are both getter and setter functions. So when I called just text up here, that was a getter function. And so by calling text, it returned me the text of the element. But then I could set the value of that element by calling text and passing in a value. And again, we're working in sets, so I could just as easily work with a different element and set all of text within that same element at the same time. In fact, let's try that with an unordered list. So here I can select all the list items on the page, and this will be more than just elements within my example, but then I can go and set the text to list item. And so there's a number of different items that are available on the page, and so you'll see down here, as well as up at the top, and even the tabs, all of the list items have now been updated to the text of list item, because it's working against that entire set that matches the selector.

Summary

So, to wrap up this module, you've learned about the significance of the $ variable in jQuery. You also learned a little bit about anonymous functions and how they can be used with jQuery, and how to think in sets. jQuery inherently works with sets as you select parts of the page and work with them as elements in the DOM. So in the next module, we'll be talking about finding parts of a page. And I'll show you a number of different techniques where you'd be able to find different elements within a webpage. I'll see you there.

Finding Parts of a Page

Introduction

One of jQuery's greatest strengths is its ability to find parts of the page in an easy and reliable way. Modern web pages are often complex with hundreds of elements on a single page, so being able to easily find just what you're looking for is crucial, and jQuery makes this a snap. In this module, we'll discuss many different ways to find parts of a page. All right, let's go ahead and get started.

Introduction to Selectors

Coming back to our example, the Coded Homes page has a logo in the upper left of the page. While the logo is one of the first things you see on the page, it appears there as the result of a bit of a deep hierarchy on the page. If we look just at the skeleton of the page for a moment, you'll see how the page begins with the root HTML element, and then proceeds down through the body element, inside a number of containing divs, and some are named, others are not, through the anchor element that makes the image a link, and then finally to the image itself. HTML is by nature hierarchal. So how do we find what we're looking for in light of the sometimes complex structure of a webpage? Well, you use the right selector. So, what is a selector?

Selectors in a Web Page

If we take a look at the running version of our example page, we go over to the image, I'll right-click, and then say Inspect element. Now, let's rearrange things here for just a moment, so we can take a look at the selector that is built up in order to find this element on the page. So let's take a look down here at the bottom of the screen. So you'll notice first that it's looking at HTML. Inside of that is the body element, and then a div element, and then here we have another div element, but it has the ID of demo-content-main-container. Now this is the same hierarchy that you saw in the slide a moment ago, but here you can see how it ties together specifically within the webpage. So then we have a few other divs, and then another div that has an ID to it, so demo, container, and then it also has a class applied to it, which is .tab-pane, and then .active. So those two classes are applied to this one div. And then inside that, we have a div of house-detail, and then finally, we get down to the logo, inside that div is an anchor tag, and that anchor tab wraps the image tag itself so that it can make a link for the image. So this entire string, this entire hierarchy that you see down here at the bottom of the screen, this makes up basically the full selector that you could use in order to find this one image element on the page. Now obviously if you were trying to narrow down to just that image, you wouldn't need to use the entire selector that you see here, but what you can see is how different elements can be identified in different ways. For instance, here we have a div, which we could find if we were looking for all the divs on the page, but we could also specifically look for the ID of demo-content-container, or look for elements that have the tab-pane, or the active classes all applied to them. So the selector gives us a number of different ways in order to find elements on the page.

CSS3 Selector Review

Now jQuery largely operates using CSS3 selectors, and you just saw, selectors are strings that identify elements on the page. Now, an intimate knowledge of CSS3 is not a requirement for this course, but just to refresh your memory, let's review a few principles of CSS selectors. One of the most commonly used attributes of HTML elements is the id. Ids are special, because the values are meant to be unique across a page. This is helpful when working with selectors, because you can easily zero in on an element of the page by using the id selector. Here you can see how the pound sign is being used to tell jQuery that the content-container is an id value. In contrast to ids, classes are meant to be applied to one or many elements on the page. This makes it easy to locate collections or sets of elements that either require styling in the context of CSS, or manipulation in the context of jQuery. When you're targeting a class, the selector is prefixed with a dot, as shown here. The last item I'd like to mention is the concept of a pseudo class. Pseudo classes reflect a specific state of an element. In the code snippet, the pseudo class is being used to apply a style to the hover state of a link. A pseudo class can be used in jQuery to find things like the first element inside a div. Pseudo classes are easy to spot, because they make use of a colon right after the element name. Now, this is just a small sampling of the types of selectors you can create. For a more robust introduction to CSS3 and CSS3 selectors, make sure you check out Jesse Liberty's course, CSS 3 From Scratch here on Pluralsight. But for now, let's look and see how some of the selectors work within jQuery.

Demo: CSS3 Selectors

So let's start by taking a look at how jQuery uses CSS3 selectors, and we'll start off with some real basics here. First, let's look at finding all the buttons on the page. So by executing this statement and passing in the selector of just button into the jQuery function, it finds all the buttons that are found on this page and sets them equal to an array here called buttons. So you'll notice that the first one here is a collapse button, which you can't see right now, because this is the Bootstrap button that collapses the navigation when it's working within a smaller view port. The next two buttons you can see on the page, so you'll notice that down here the Cancel button shows up, and the Save button for working within the form for the Coded Homes page. And the last button you can't see, it shows up on the JavaScript tab, and that's just a little alert message telling you to open up the console window if you want to work with the code. But the value here for you is to say that all I had to do was pass in a known HTML element, so this is button. I passed in the name of the HTML tag of button, and that found all of the elements within the page and placed it into an array for me. So that will work with any HTML element that you have on the page. Now let's look at using a selector that's an id selector. So now instead of looking for all buttons, I'll look specifically for the saveButton. And so when I execute that statement, all that's returned to me now is the saveButton. And remember this follows the principle found in CSS, and that is to say that any element with an id is expected to be unique on the page. So by going specifically for save-button on the id of this element, I pretty much know that I'll get back just that one item. So ids can be very, very useful. Now if I want to look for more than one item at a time, of course I can use the HTML element, but if I want to look for something more specific, I can look at a class. So let's look at what that would look like next. Now if you remember a class is found in a selector by prefixing what you're looking for with a dot. So let's take a look at just finding buttons that have the btn class applied to them. So here I'll do class btn, looking for the class of btn on the elements. I'm going to execute this statement. Now I can take a look at what's returned. And you see all of the different items that have the btn class applied to them. And you'll notice because of the way Bootstrap works, you can apply the btn class to anchor elements as well. so these are just regular links that are being styled as a button. So here I find everything that has the btn class applied to it. Now those are some of the most basic selectors, let's try something that's a little more robust, something that we might expect to find within a CSS3 selector. What I'd like to do with this next one is combine an id with a pseudo class. So let's find the first feature. So the item that I'm looking for here is trying to find this list item here that's the first feature found in the special features. So to do that, I'll create a variable, and then first we'll look at the id of the containing div that has those list items in it. Now I'll add a space, and I'll say that what I'm looking for is that container div, and then something inside of it. So that space then will say, now I'm looking for a list item, but what I'd also like to do is find the first child. And so when I execute this statement, when I look at first feature, that returns to me that list item here of Crown molding throughout. So as you can see, you can get very specific with the selectors that you use that you pass in the jQuery in order to find elements on the page very quickly. The last one that I'd like to show you is how to find links that are only external links, so not relative links to the page. And to do this, we'll use a CSS3 selector that uses the starts with operator. So let's start off by creating a variable, and here I'll look for any anchors on the page that have an attribute of href that start with a value of http. And when I execute this statement and we take a look at what it returns, you'll notice that each one of the anchors that are returned are only items that are linking to something outside the page. So in other words, there are no relative links returned in the results set. So here's an anchor with the href of http://codedhomes.com, or api.jquery.com on and on. So the CSS3 selector of looking for the anchor tag with the href value equal to http, but by using this carrot, I'm saying that it starts with whatever string I'm passing it into. So the more you learn about CSS3 selectors, the more effective you'll be working with jQuery in order to find elements on the page. So next let's take a look at what it's like to work with HTML literals with jQuery.

Demo: HTML Literals

Now from time to time, you may want to create HTML literals and select those with jQuery in order to create new elements on the page. From there, you can change the way they look or behave, but first you need to know how to create them using a literal selector. So let's create a div, a brand new div, just in memory. So here my selector, instead of being a CSS3 selector, will actually just be a string of HTML. And so now as I execute that and take a look at the result, you'll see that what's returned here is an element that's been created in memory based off the string that I passed into jQuery that created that div in the results set. So now once I have this here, I can change the way it looks, I can change the way it behaves, I can add it into the page. There's a number of different ways of doing that. But what I want you to understand right now is just that by passing in a fragment of HTML, you can create new elements in memory using jQuery. Now you can also do the same thing with arrays. So if I want to create more than one element, I can do that as well. So here what I'm doing is I'm passing an array to the jQuery function, and then I can add in multiple literals. So here I'll add in a span, and then add in another. So let's take a look at the result there. And as you can guess, now what I have is a selected set of new elements that are created in memory, one of the span one, and the other one of span two. So by using HTML literals, you can create new elements in memory and then work with them on your page all using jQuery. Now there may be times when you're working with raw DOM elements, and what you can do is you can pass those into jQuery as well in order to get a wrap set. So let's look at doing that next.

Demo: DOM Elements

Now sometimes when you're working with a page, you'll have an opportunity to have access to raw DOM elements. So for instance, if we want to find the div on the page for a house detail, we might do something like this. So we'll look for the element by its id, and then pass in the id value of house-detail. And so this returns the actual DOM element itself, the raw DOM element of house-detail. So what we can do, is we can take that same DOM element and pass it into jQuery and then work with a wrap set. Now the value for this will become more apparent as we continue on in the course, because once you have elements selected with jQuery, there's a lot that you can do with it. So let's take a look at how we might work with a raw DOM element directly in jQuery. So let's do the same thing that we've done in the past. Let's create a variable, and then we'll pass in a selector to that DOM element directly into the jQuery function. Now, you'll notice here, I'm not putting a pound sign in front of the id, because that's something specific to jQuery, because that's a CSS3 selector. Here document.getElementById simply takes the id value. So as that's executed, and I take a look at the value for detail, you'll notice that it's wrapped in brackets as an array, and this is an indication that this is a wrapped set from a jQuery selector. And just as we did with HTML literals, by passing in an array in as well as individual items, you can do the same thing with raw DOM elements. So let's take a look at trying to find the titles on the page. You'll notice I do my open and close brackets and open and close parentheses all at the same time, that way I make sure I don't leave anything off at the end. Now a document.querySelector is the native browser implementation for doing selection inside the browser. So what this says, is it will take in a query and will look for any element that matches the h2 selector. So we'll use that to find h2s and h3s. So I can pass all of these into jQuery, and then when we take a look at titles, you can see that it finds the h2 and the h3 all on the page. So working with DOM elements works just as well when you're using jQuery, as well as using selectors. Now once you've found a specific element, you may want to find something that it's in relation to. So we'll look at using the find function in the next clip.

Demo: Find

Now sometimes you'll locate an element on the page, but what you'll want to do is find something within the hierarchy of that element, so something that's hierarchically underneath the element that you've found. So one of the things that you can do is use the find function. So in this case, what we'd like to do is find the primary buttons on the page, but only do that within a specific div element. Now there's a lot of different ways that you could do this, but I'm using this example in order to show you how to use the find function. So the first thing that we'll do is take a look at finding just the column on the left-hand side of the page. So we'll create a variable for the primary button, and the first selector that we'll use here is for the class of col-sm-5, and that's a Bootstrap class that says it's a column that has 5 units of width to it. The details of that aren't important; you can watch the Bootstrap course if you'd like to find out more about that, but for right now, we're just looking at a specific class on the page. The interesting part is to say that once we've found that item, and you can see that it's selected here, so this is the column or the division that we found on the page, and we want to find that button, it's the Save button that we're ultimately looking for. And so what we'll do is add to our item here and say that now that we've found that, we want to run the find function. And here I can pass in another selector. Now I'll make this a very specific selector, and of course, you have the power and capability of CSS3 selectors available to you, so it doesn't necessarily have to be this complex, but I'll show you what's possible here. So we'll say that we're looking for a button. Now there's two buttons within that column there, so we want to find something specific. So we want to find a button that has a value within the class attribute that's anything that equals btn-primary. And so now instead of looking with the selector trying to find everything on the page, what it will do first is select the left-hand column first, and then as it runs the find function, it will only look for items specifically within the context of what was initially found within the first selector. So as we look for the left-hand column, it'll only look for items within that. So let's execute this, and then take a look at the results. And so you can see, it found that element on the page by narrowing its scope to just what's in that left-hand column. Now another really useful capability is to be able to find items in relation to elements that you've found. So let's look at trying to find parents and children of an element.

Demo: Parents

Now the next function I'd like to show you how to use is the parents function. So let's take a look at the HTML for a moment. What we're doing is we're going to look at selecting the tbody of this table. Now in the first example, what we'll first do is find the tbody and then ask to look for all of the parents to that tbody. So that will find the table elements, and then the div element, and then everything else on up the chain. But then we'll also look at narrowing that down a little bit as well. So let's go back over to our page preview and let's look for the parents of this tbody. So here I have a standard selector, the same type of thing that you've seen me do all through this module, and so now what we'll do is run the parents function. And so just like I said, what happens is, is it takes a look at the item that you've selected and looks up the hierarchy chain to find each one of the parents until it ultimately gets to the very top of the page. So you'll notice from tbody, it goes into table, and then from there it goes into the container div, and then the div of the row or the layout grid, and then house-detail, and then tabpanel, and all the way up until we get to the body of the HTML document, and then ultimately, the HTML element itself. So if you need to find elements in relation to something that you've selected on the page using jQuery, you can do that using parents, but that gives you the entire hierarchy chain. But what if you just want to find the immediate parent or a parent of a specific element type? Well, let's take a look at doing that. So here what we're going to do is we'll select the tbody, but we just want to find the parent table itself. So in this case, we're starting off with the exact same selector as we had before, and we'll call parents once again, but in this case, we'll say that we're looking for parents that have the element of table in them. And in this case, there's only one match. And so you can see here, table maps to the actual table that is found as the parent element for tbody. So depending on how you need to find the parents of the elements that you've selected, the parents function can be very powerful in finding those items within context. All right, now let's look at working with children.

Demo: Children

Now just as we worked with the parents for the tbody, we can also do that with children. So let's go back to our friend tbody, and let's get the children, and use the very same selector, so we're just looking for the tbody, and asking for the children of this item. And when we inspect the results, you'll notice that it returns each one of the rows that's a child to that tbody. And that's the full element graph of that item. So as I expand this, you can see that it has the header and then the data item within that row. So if you need to find children of an item, you can just call the children function after you've run a selection.

Summary

In this module, you've learned how to find parts of a page using jQuery. You've seen how to use CSS3 selectors with jQuery, and you've learned how to find elements by relation by locating parents and children from an element. In the next module, you'll learn to start changing how elements look by working with style sheets and classes. I'll see you there.

Adding Style and Effects with a Little Class

Introduction

Often one of the most common actions developers want to do after elements are selected is to change how they look. This module demonstrates how to manipulate the styles applied to selected elements, and how to do it all via jQuery.

CSS Primer

CSS, or cascading style sheets, are the way that webpages get a look and feel applied to them. By way of a short review, I'd like to quickly go over some of the basic rules of cascading style sheets, just to make sure you have the appropriate context for the coming modules. So let's take a look at how styles behave on a webpage. So, first let's look down at the bottom of the screen here, and you can see that the style sheet that's applied to this page. So the body rules there just give the font a little nice look to it, and then I've added some padding to the page. What we're more interested in here is the values of the font size. So for the h1, the font size is set at 55 pixels, and that's a pretty large font size. And then the title class, when the title class is applied to the element, that takes the font size down to 35 pixels. But if you notice up in the right-hand side, I'm cascading in style!, that's not really quite as big as 55 or 35 pixels. The reason for that is because there's an inline style being applied to this element, setting the font size at 25 pixels. So even though the rule for the h1 of 55 pixels is being applied to this h1 element, that's ultimately being overridden by the style, the inline style, setting the font size at 25 pixels. So let's see this in action. If I were to come in here and remove the style, the inline style from this element, you'll notice now that the font got much larger, and this now is rendering at 35 pixels for the font size. And that's because the title class is still being applied to the h1. So if I were to remove the title class, now you can see that it's being rendered at 55 pixels. So this demonstrates the cascading nature of style sheets. The first styles that are applied to the page are the ones that are linked to from a linked style sheet, like you see here in the link element at the top of the page. Then the next precedent is any styles that are applied to an element itself. So down here you can see the h1, so then the font size where the h1 is applied. But that's overridden by the rule given for the class of title, and ultimately, if I put these back in, you can see that the inline style, the one that's the most specific is the inline style setting the font size at 25 pixels, is ultimately what takes the highest precedence. So when we talk about cascading style sheets, we're talking about the nature of cascading rules that go from general to specific. And again if you need more practice with this, there are other resources here on Pluralsight that can help you with that. For more in depth discussion on the many different options and capabilities of cascading style sheets, I encourage you to watch Introduction to CSS here on Pluralsight. For quick access to the course, you can navigate to bitly.com/ps-css. So now that you've had a chance to get a quick primer on how CSS works in the browser, let's turn our attention to how you can use jQuery to change the style of selected elements.

Demo: attr

The first example that I'd like to show you is how do you use a function of jQuery that gives you the chance to manipulate just about any attribute of an element? And so that's the attr function. So we'll start off by using the same selector that we've been using in the past, and that's by looking for the h2 on the page. Now with this selected, we can use attr, and then tell it what attribute of the element we want it to effect. So in this case, it's the style attribute. And as the second argument, all I need to do is pass in a style sheet rule. So here let's change the background color of this element. So here you can see that the background color is now changed. So this is the brute force way of changing an element style. So you can go directly against the style rule and change it how you want, but there are easier ways to interact within element styles. So let's take a look at using the CSS method itself in the next clip.

Demo: css

Now the CSS function cleans up your code quite a bit in working within element style sheets. So previously, we had a selector that looked like this. And that works, but there's a way to clean this up quite a bit. Instead of using the attribute function, here we'll use css, and then style becomes unnecessary at this point. So now all we need to do is work with individual style properties. Now if you recall, getter and setter functions allow you to get values out, as well as pass values in. So in this case, what we can do is we can interrogate the style sheet and find out what the current value of the background color is. So we'll set this equal to a variable. So when we take a look at the result of bg, you can see that the current background value is set as white, or rbga(0, 0, 0, 0). So if you want to change that value, we can use a similar type of syntax, so here we'll use the h2 selector and then instead of passing in a string for a background color, we'll pass in a hash that has the style sheet rules that we want applied to the element. Now since this is a JavaScript object, normally background color in CSS rules is the word background-color, like you see at the top here. But what we're passing into the CSS function is a JavaScript object. So backgroundColor here will be CamelCased, and then we can pass in a value for it. So this sets the backgroundColor of the element to the value that I passed in from calling the CSS function. And the CamelCasing works with the getter as well. So if I were to ask for the backgroundColor of the element by executing this statement, you can see that I get the color code for the orange that's shaded for that element. So the CSS function is quite flexibility in allowing you to set individual style properties for each one of the elements that you have selected, and it allows you to do it in a very clean way. Now you can enjoy even more flexibility in working with elements on the page by using classes rather than having to use specific style sheet rules. So next let's look at adding and removing class from an element.

Demo: addClass and removeClass

Now working with classes is often a big advantage to you as you're dealing with styling elements on your webpage, because with classes, you can group together different styles at one time rather than working with individual style rules. Now you may remember a demo like this in the introduction to the course, but I'm going to show you this with a little bit of a twist on it here now. So to add the highlight class to the h2 element, we'll use the addClass function. So this, of course, adds the highlight class to the element, and you can see the result here on the screen. And of course, we can remove that class just as easily by calling removeClass. And you can see from the result it comes back into the console window here, that there's still another class applied to this h2 element of expanded. So by calling removeClass, we're only removing the one class that we've passed into the function. But there's other ways that you can use this function as well. Rather than passing in a string, you can pass to addClass or removeClass a function, which allows you to decide which class you're manipulating. So if you have some logic that you need to run before you decide which class you'll add or remove, you can do that quite easily. This is what that would look like. So here I'm just returning a string, but as you can imagine, you may have some small bits of logic that you want to run to decide whether or not you pass bordered back or some other class name. So when we run this, it adds the bordered class to the h2 element. And of course, we can do the same thing with removeClass that we did with addClass by allowing it to run this function and to return bordered from the class that needs to be removed. So there is a lot of power available to you just in these few functions that allow you to change individual style sheet rules, as well as add and remove classes to elements as you're working with your pages. In the next clip, I'll show you how to use some effects that will allow you to take control of whether or not elements show up or are hidden on the page.

Demo: show, hide, and toggle

Quite often one of the first things that you want to do as you're working on the UI of your page, is to show or hide different elements based off of certain logic that happens in the background. So by using addClass, removeClass, you can achieve those types of interactions. But it gets even easier when you use some of the specialized functions that are available within jQuery. So first let's take a look at how easy it is to hide an element on the page. So let's hide our address here. Simply call the selector and then use the hide function. So watch carefully as the street address disappears from the page. Now of course, making it reappear is just as easy. By using the same selector, we can call the show function. And now it appears back on the page. Now you can imagine there's probably certain areas of logic where you may want to hide or show an element, depending on certain settings that are happening within your logic. So, in order to accommodate that, in order to make it easy, there's a function that you can use called toggle. And toggle does just that. If it's shown, it will hide it, so right now it's appearing on the page, so it hides it. If I call it again, it will show up back up on the page. And in fact, if I explicitly say that I want to hide this item, it knows that it's hidden, so that if I were to call toggle again, it'll make it appear back on the page. So, by using show, hide, and toggle in the appropriate places, it makes it very easy for you to make certain elements of your page appear and disappear. And just like you had the option when using add or remove class, you can also pass a function into toggle as well. And it's actually the same for show, hide, and toggle, but I'll show you it with toggle. So here by calling toggle and then passing in a function, I can just write out to the console that this element has been toggled in its visibility. So you see now it disappeared, and then in the console, I got the text written out based off of the command that I gave it in the anonymous function. So this is really powerful; it really allows you to take control of your UI. But there's another command that I'd like to show you next, which gives it a little bit more of a refined look.

Demo: fade

Now showing and hiding an element get the job done, but by using fading effects, you can make it look even more refined. So, watch the address here as I tell it to fadeOut. That was a nice little transition in order to fade it out on the page. Then, of course, we can do the very same thing with fadeIn. Now you do have control over the speed in which this effect is applied. So here I can say that I want to fadeOut, but I want it to do it quickly. So tell it to execute that effect fast. So that was a lot faster than the time before. And of course, in the very same way, you also have control over being able to execute a function after the effect is done executing. So here let's fadeIn, and then run some code once it's done fading in. Just to mix things up a little bit, let's add a class to another element on the page once this one fades in. So here you can see that after that address fades in, then we'll add the highlight class to special features. And if you're watching quickly, you saw that the class was applied after the element was done fading in. So by having just these few tools available to you gives you enough power to make a truly interactive UI for each one of your applications, all using jQuery. So now the next thing we want to turn our attention to, is working with some of the events in the page, so that we can apply these interactions at just the right time.

Summary

In this module, you've learned how you can use jQuery to manipulate style and add effects to selected elements. You saw how you could do a manual manipulation of CSS, as well as adding and removing of specific classes. And finally, you saw how you could add effects to selected elements all using jQuery. Now coming in the next module, we'll talk about when events happen, and how you can respond to that in your web applications.

When Events Happen

Introduction

When events happen, well, you want to be able to do something interesting in your applications. So let's talk just for a moment about what events exactly are, so you have a clear picture as we get into the jQuery examples.

What Is an Event?

Now, an event is something that happens. And when we think of events in the real world, you might have in mind events on your calendar. Between birthdays, anniversaries, meetings, conferences, and much more, events are things that happen. Now it's fairly easy to grasp the concept of a birthday, but how do events relate to web applications? Well, let's listen in on a conversation between a rockstar developer and his boss. The developer is working on an application critical to the business, and the boss wants to know as soon as possible when progress is being made on the project. So the boss begins by asking the developer for updates on the project, and the developer is happy to comply. In fact, he's so enthusiastic about the project, he begins to share every detail-- probably too much detail. In fact, the messages to the boss are starting to get to be a little too much, to the point that the boss makes it clear that he only wants to hear from the rockstar developer in the event that something interesting happens. Now the developer gets it and just notifies the boss when the application is ready for review. And this is optimal, because now the boss is only notified when something happens that is truly valuable to him. And this is a metaphor for how events work in software. There are hundreds of thousands of things happening all the time in a software application, but as developers, we just want to know about certain events. So next let's talk about some common events that occur in a web application.

Events on a Web Page

An event is being able to know when the page loads, or when a key is pressed on the keyboard, or, and this is a common one, when a button is clicked, or when an HTML form is submitted, when the window is scrolling, or when an element gets focused. Now this is just a list of six events that you might care to handle in a web application, but there are many more available. So this is just a sampling. So now let's take a look at working with events using jQuery.

Demo: document ready

The first event that I'd like to show you is the document ready event. Now this is also referred to as the jQuery ready event, and I showed you this earlier in the course. I'll review it one more time here just because it's such an important event to use. This is the event that you want to handle once the page loads, once the DOM is ready, so once all the elements on the page are ready to be interacted with, and so you'll use this over and over again in jQuery. Here's what it looks like in code. So this is what the syntax looks like. Now I can't just execute this statement here to show you the result, because this event fires when the page is loaded. But I did want you to have an opportunity to see the syntax just in its basic form one more time. Now to give you an idea of what this looks like in real life, let's take a look at the script that executes on this page as it loads. So let's take the console window and move it down to the bottom of the page, and we'll just remove what's here, because we won't be executing that, and then take a look at the sources of this page. So here you can come in and you can see that there's a JavaScript file that's referenced in this page called utils.js. Within utils.js, here you can see that same jQuery ready function being opened up and then a number of different statements that are executed as the page is loaded. I've set a break point here on line 39, and so now as I refresh the page, I'll press F5 to refresh the page, and you'll see here that the break point is hit. So again, once the page is loaded, then all of the code that I need in order to run on the page is found within the anonymous method that's inside the dollar sign in parentheses. So I'll let this continue to execute, and now the page is done with its initial run. Another way that you can write the exact same functionality is using this syntax. So here you'll notice that it's selecting the document, jQuery is selecting the document, and then running the ready function, and then an anonymous function is being executed as a result of the ready function being run. So it's exactly the same thing as I showed you before, it's just this approach is a little more verbose. You'll notice that most people tend to go with the shorthand version of the jQuery ready function, and I think you'll probably find it works well in most situations as well. Next, let's take a look at handling specific events on the page.

Demo: on and off

The next issue in dealing with events is being able to handle specific events that happen on the page. For instance, how would you handle dealing with someone clicking on this button? Right now when I click on Save, absolutely nothing happens. Now, there's a number of different ways to deal with click events, but I'd like to show you the most basic way first. The first thing that we'll do is select the button itself. So we'll start out with a selector that finds the button, and then we'll run the on function. The on function takes two parameters. The first one is the event that you're handling, and in this case what we're handling is the click event. The second parameter is a function that represents the logic that's run once that item has been clicked. So here we'll just log to the screen that the save button is clicked. Now I'll run that statement, and now when we click on the Save button, you can see that it logs out that the save button is clicked. So this is how you begin to add interactivity to your web pages by handling click events of certain elements on the page and being able to respond to it with your custom logic. Now what happens if you want to have that element no longer respond to the click event? Well, then instead of using the on function, you would use the off function. And that works in much the same way. So the first thing we'll do is start off with the same selector. And now instead of running on, we'll run the off function, and this just takes one parameter. So here we'll designate the event that we no longer want to listen for. So I'll go ahead and execute that, and so now when we click on the Save button, nothing happens all over again. So you can handle the events by using on, passing in the event name, and then providing some logic in anonymous function, what happens when that event occurs, so in this case, click, and then if you want to take that listener off, you can use the off function and remove it by passing in the event name. Now there might be situations in which you only want to handle an event the first time it happens. So let's take a look at dealing with that situation next.

Demo: one

Now in the previous clip, I showed you how you can handle an event using on and remove that handling by using off. But what if you want to only deal with a certain event the first time it happens? So let's do that, and we'll start off with the same selector that we used before, and here what we'll do is use the one function. Now you have to be careful when you're typing this, because it's only one character away from on. So here what we're doing is we're saying we want to handle the click event, but only one time. So as I execute that statement, I'll go ahead and click on the Save button, and notice that it logs it the first time that I click it, but as I continue to click on the Save button, nothing else is happening. So if you need to only have an event happen one time and one time only, then the one function is your friend. Now dealing with click events can get a whole lot easier by using a specialized function specifically for clicks. So let's look at that next.

Demo: click

Now when you're dealing with specific events, jQuery makes life a little bit easier by simplifying the API for you. So, let's take a look at our button once again, and now instead of using on or one or anything like that that's more general, what we can use is a specific function just for click. So here what I can do is type click, and now all I need to provide is the anonymous function that's run once the click happens. So you can see how the API is much more simplified here, because now I have a function called click rather than passing it in as a string. So now when I go and click on the Save button, you can see that I'm logging out as many times as I'm clicking on that button. And click isn't the only event that gets that special type of treatment. Over on jQuery's API documentation, you can see the list of all the events that it has special functions for. So if we scroll down the list a little bit, you can see that click is right there, but you can also use dblclick, change, blur, on and on. So all you need to know is the event that you need to handle, and you can look and see if jQuery has that specialized event handler already prepared for you. So let's take a look at just using one more of those items, the blur event method.

Demo: blur

So as you can see that working with these event methods is actually quite easy. So if we set up the blur event method for the Save button, now when I click on the button and then tab off of it, that fires the blur event from that element, and then it runs the function where it logs out no more love for the Save button. So now that I've familiarized you with events in jQuery, let's wrap up this module and then I can talk to you about making your code even more expressive and more efficient as well.

Summary

In this module, I've shared with you events and how they relate to jQuery. I covered the nature of events, and reviewed a number of different types of events in jQuery, and how you can use them in your web applications. In the next module, I'll show you how to clean up your jQuery code and make it more efficient by using chaining.

Chaining Makes It Easer

Introduction

In this short module, I introduce you to a technique called chaining that will make your code easier to read and more efficient, so let's go ahead and get started right with some demos.

Demo: Verbose Code Without Chaining

Now perhaps the best way to see the value of chaining is to take a look at an example that doesn't use chaining. This way you get an opportunity to see what benefit it gives you. This example will use the special features, and I'll apply a number of different commands to the list items for the special features, so let's begin by adding a few classes to the list items for special features. So with this statement, we'll add the highlight and bordered class to each one of the list items for the special features. And I forgot an item here, so we'll go ahead and add there. So each one of the list items has both of those classes applied to the element. Now what we'll do is change the height and width, and we'll do the width as well. So now you can see we've changed the look of each one of those list items quite a bit through each one of the different statements that we've applied to the list items, but the problem with this is that if we take a look at each one of the statements that we've run, each time we've selected the special-features list item and applied either the new class to it or changed the height or changed the width. Now this is really inefficient. What's happening is that each time one of these statements is evaluated, jQuery has to search through the document object model or the DOM and find each one of those items in order to apply the width, or to add the classes, or change the height, and so what you really want to do is change the syntax in order to use chaining, so that the selection against the DOM is only happening one time. Let's take a look at doing that in the next clip.

Demo: Basic Chaining

Now we left off at the last clip with code like what you see here in the console window, and so this is changing elements on the page using jQuery, but doing selection over and over again. Now what we want to do is take this code statement and change it so that it uses chaining instead of reselection. So the first thing that I'll do is remove each one of the semicolons in the middle here, and we'll just keep the last one at the end of the statement. Then what we can do is simply get rid of these selectors, and you see me lining everything up with white space after the selector, because by doing this and setting the dots on the same place, it makes it much easier to read the statement, so now when I execute this statement, this all runs together. The selection is happening against the DOM one time, and then first it's applying the width, then it applies the height, and then it adds each one of the classes of highlight and bordered to each one of the list items found inside the special-features div. So visually and programmatically, we end up with the same result, it's just that the syntax that we're using is easier to read, but more importantly, it's more efficient, because we're not having to reselect the set of items each time we're applying a command or running a function against the set. In the next clip, I'll show you something that's a little bit more involved, and you can get a better idea for how chaining makes it easier for you to read jQuery code.

Demo: Complex Chaining

Now for this next example, I'd like to show you an example of chaining which is a little bit more complex, so I'll just paste in the code here, and then we can talk about what's happening. So just like as before, we start off with a selector that goes to the div and gets each one of the list items. The width is set to 50%, the height to 200 pixels, and then we add the class of highlight and bordered. Now each is a function that you can use, which works really well with chaining, because often what you'll want to do is create a selection and then do something for each one of the items in the resulting set. So in this case, when each executes, an anonymous function is provided, and the arguments for that function are the index of the item that's being iterated over, and the actual item itself. Now if you look in the body of this function, what we need to do is take that item, the item that's passed in as the argument for the function is the raw DOM element, so we use jQuery, we wrap that in a jQuery selector instance of the item. So then from there, we can go to $item and change the text. Now we'll set the text and update it to the current value of the text, plus we'll go and get an attribute value out of the list items. Now if we take a look at the HTML for each one of the list items, you'll notice that data-feature-id has a value for it, so the first one is 131, and on down the line. So the code over here will take that attribute out of each one of the list items and update the text with it. So this is kind of a contrived example of how you would use this, but it gives you an opportunity to see how you'd use the each function and use it with the chaining syntax in order to work with each one of the items. So once this is executed, you can see that each one of the style changes is made to the items, and then the text is updated with the original text, plus extracting out the id from the element and updating the text with that value. So when you look at code that uses the chaining syntax, or the chaining approach, it makes it much easier for you to be able to see what's going on, because you can see that based off this selector, a number of different actions are being taken against that set. Now, there's one other thing that you can do in order to improve the performance of this code, so here I've brought back the original statement. Now, instead of executing everything against the raw selector itself, what we could do is have the same code available, but notice what I've done at the top. I've had the selector run and set that aside in a variable. So now that the items variable holds the matching set or the selected set of items from jQuery, now I can chain off of that variable and do as much as I need to. What's important here, though, is that now I can reuse items over and over again, and I don't have to reselect the page or requery the DOM in order to select those items. So if you're only going to work with elements once, you don't need to worry about setting up a variable, but if you need it over and over again in your page, it makes a lot of sense to create that variable, and if you're doing multiple actions against the set, you can chain each one of those commands and make it much easier for you to read and maintain in the future. Now chaining isn't just appropriate for sets; you can also use it for individual items as well, and so we'll look at this last example next.

Demo: Single Match Chaining

Now you might think that based off the examples that I've shown you that chaining is only appropriate for a set of items, but in fact, it's not. So if we take a look at this example, you can see that what I'm selecting is the individual save button on the page, but then I'm chaining together the commands of providing an implementation for when the click event happens, and also adding a class to the item. So as I evaluate this code, you can see that the button is now bordered, and when I click on it, it shows up as clicked in the console. So there you have it, chaining makes it easier.

Summary

In this module, I've shown you how you can use chaining to write clear code that reads somewhat like a sentence, and to write more efficient code that reduces the number of times jQuery needs to search through the DOM. You're doing great, and with two modules left, in the next module, I introduce you to some of the strategies for Working with User Input.

Working with User Input

Introduction

Closing the circle for an interactive website is allowing your webpages to accept user input. In this module, I show you strategies for reading user input using jQuery. Please note that as this is a getting started course, I don't cover forms in the context of dealing with posting data to the server. For that information, you'll want to dive in deeper with one of the other jQuery courses here on Pluralsight. For now, let's get started by working with textboxes and textareas.

Demo: Textboxes and Textareas

So the first input element that we'll work with is textareas and textboxes. I'm grouping them together, because they're virtually the same when you work in jQuery with them. Let's take a look at the HTML, and as we look down here, you can see that the textarea has an id of notes-box, so we'll use that in our selector, so I'll come over here and select that textarea. Now the function that I'm using is val, which stands for value. This is a getter or a setter function, so I can provide a value by passing in an argument, or I could call it just like this and get the value out. So let's go ahead and add something in to begin with. So as I execute this, you'll notice down in the textarea, it now has a value of these are my notes. And so if I run the same function again without an argument, what we get back is the value out of the textarea, and again, this works exactly the same for textboxes. Now there are some input elements that have some specialized rules, so let's take a look at working with a date input type next.

Demo: Date Picker

The next element that we'll work with is an input type of date, so once again, let's return to the HTML and look at the markup for this item. So here you can see that I have our standard input type, the type is set to date, and then it has an id of showing-date, so we'll use that within the selector. So let's go back over to the page itself, and then we can set up the selector like this. Now once again, we'll be using the val function, but this one has some validation rules built into it, because we're working with an input type of date. So first let's try passing in just the string of test. Now notice what happens here. We get an error bubbled up by jQuery that says the specified value of test does not conform to the required format of year, month, and day, so let's try passing in a valid date now. We still have to pass it in as a string, so we'll pass in 2015-01-01, and so as I evaluate that, when we look over at the input element, you can see that it shows that date. Now you can tell also that this is an input type of date, because in Chrome this renders a nice little date picker for us, it's got the spinner buttons, the X to clear it out, and everything that we'd expect from an input type that equals date. So since this is a getter and a setter function, once again, we can call it without any arguments, and when this is valuated, it returns back a string of the date. So jQuery makes it a little bit easier for you when you're working with specific input types. The next one we'll take a look at is checkboxes.

Demo: Checkboxes

The next input element that we'll look at is the checkbox, so we have a checkbox down here for whether or not the owner is present as the person is filling out this real estate form. Let's for a moment take a look at the HTML. So here you can see is the input element, the type is checkbox, and the id is owner-present-check. Now let's go back to the page for a moment and let's inspect the element, come down here, and then what we can do is come to the input element, and what we'll do is add an attribute of checked. So when we do that, you'll notice over on the running page, the checkbox is now checked. So I've shown you the attribute function before, the attr function, so it seems to follow that that's the function that we would use in order to check a checkbox, so let's go ahead and give that a shot. So I'll paste in the selector, and then we'll run attr for the attribute on the element, and we'll say checked, and pass in a value of true. And just to make sure this test works correctly, I'll make sure to uncheck this checkbox. Now when we run this, it should check the checkbox, right? You'll notice nothing happened. So if that command doesn't work, well, which one will? In fact, it's the property function, and that looks like this. So here we're running prop for the prop function, and now you'll notice that the checkbox is checked. Now the reason this works like this is a bit out of scope of a getting started course, but basically there's a representation in JavaScript of that checkbox, and that representation is in memory as a JavaScript object, and that object has a property of checked, which eventually influences how the HTML element is rendered on the page, so like I said, this is a bit out of scope for this course. If you want to dive in deeper into this area, I suggest you check out some of the more advanced JavaScript courses here on Pluralsight, but all you really need to know is that if you want to check a checkbox, you use the prop function in order to make that happen. Now of course, this is a getter and setter function, so in the same way we can ask for the value of checked by calling prop as checked as the argument, and when we get back true. So we can turn it off by passing in a false, you'll see that it's not checked anymore, and if we want to get its current value, we just call prop again and get back that value. So now let's take a look at radio buttons, which have its own little nuance as well.

Demo: Radio Buttons

Now let's talk about radio buttons for a moment. We've got a couple buttons down here at the bottom of this form, and you'll notice that I can click on immediate or delayed, and I can only choose one at a time, and the reason it works that way is because in HTML there's a special way that you set up radio buttons so that they're grouped together. Let's take a look at the HTML to investigate this a little bit further. This is the group here that has my radio buttons. So you notice I have an input, the type of radio, and they each have a name and a value. You'll notice that the name is the same for each one of them, they're both set as available, they have a different value, so the first value is immediate, the second one is delayed, and they both have a unique id value. So the grouping that happens between these two radio buttons is by the value that's given for its name. So when we're using jQuery, what we conceptually want to do is to take a look at the group of radio buttons, and we'll access them by its name, and we want to find out which one of them is checked. Once we know which item is checked, then we want to get the value out of that checkbox. Let's take a look at what that looks like in jQuery. What we're looking for is the availability status of this piece of real estate, and I'll take the value and set it aside in a variable. Then we'll create the selector for the checkbox that we're looking for. Now we're going to look at the group, and then ask for the item that's checked, and to do this, we'll use a psuedo class. So first we're looking for an input element with a specific attribute value, so we're looking for that input where the name is equal to available, and beyond that, we're looking for the item within the available input items that is checked. Now once that's been selected, what we want to do is get the value from that item. So as we evaluate this statement, we'll get the status back, and when we take a look at it, you can see that it's set to immediate. So I can come down here and I can change the status to delayed, and then run my command once again, and you'll see it returns back to me delayed. So this is a little bit different than what we might be used to doing in jQuery where normally you just make basically a plain selection against the DOM, and then call property or value or attribute or something like that, but in this case, it's different. Really the selector itself is giving us the power that we need in order to find the selected radio button, and the pseudo class of checked is key in making that happen in this case. Well, this gets you started with working with forms with jQuery and showing you some of the specific nuances that are involved in different input types. Let's go ahead and wrap up this module.

Summary

In this module, I showed you how to work with a number of different input elements in jQuery. You saw how the jQuery API differs among different input types, and in the next module, we'll take a step back from the implementation details, and look at jQuery at a more general level. Here you learned where to download jQuery, and the differences among the different available versions and more. I'll see you there.

The Big Picture

Introduction

This final module is meant to leave you with the context and perspective you need to continue your learning in jQuery development. Here I'll share with you some coding tips, and explain how jQuery fits into the overall web development ecosystem. So let's begin by discussing the different versions of jQuery that are available.

Different jQuery Versions

jQuery is available in two different versions. Both jQuery 1 and jQuery 2 are officially supported by the jQuery team, but what's the difference between the 2 versions? Well, to better understand the answer to this question, we first need to consider another question. What you need to know first is, will the users of your web application require support for Internet Explorer 6, 7, or 8? If the answer is yes to any of these versions, then you want to select jQuery 1. The API is identical between jQuery 1 and 2, but the only difference is the underlying support for older versions of Internet Explorer. If your users are not accessing your app with anything but Internet Explorer version 9 or higher, then you can safely use jQuery 2. The fact is that much of the code base in jQuery 1 is busy with dealing with shortcomings of old versions of Internet Explorer. By removing all the logic required to make IE behave, the file size in jQuery is drastically reduced and is recommended for use in modern web development context. Now beyond different versions, you will also encounter jQuery in a number of different contexts. Next, let's talk about jQuery's relationship to other available libraries.

jQuery in Context of Other Libraries

In order to provide context of what you're learning about jQuery, I want you to have a clear understanding of how jQuery lives in the larger JavaScript ecosystem. Therefore, during the next few set of slides, I want to paint a picture of how and where you'll encounter JavaScript and how jQuery gets into this scenario. jQuery resides in a rich JavaScript ecosystem. On the client, jQuery is often the foundation for scores of web applications and is the basis for component development found in jQuery UI. Now, jQuery UI is a collection of user interface interactions, effects, widgets, and themes, all built on top of jQuery. Some of the controls or widgets, as are known in jQuery UI, include a date picker, menu, tabs, progress bars, and more. This sets the foundation for further development for custom widgets, plug-ins, and application code that you may write or might be available via open source or commercial libraries. The bottom line is that jQuery by itself is so versatile that you can build almost anything you need in a web application from the very simple to a full-featured commercial product. Now what happens when you take the same JavaScript engine that runs in a web browser and allow it to run natively on desktops and servers? Well, that's the V8 engine that's in the browser. The JavaScript engine is known as the V8 engine, and that's exactly what Node.js is. Node.js allows you to write JavaScript for the desktop and server without the need of a web browser. Using Node, you have access to computers and resources like the file system, and on and on. What this means is that while you can use jQuery in web applications, you can also use jQuery in HTML-based native applications as well, and the last piece of the puzzle is writing mobile and device specific applications. There's a library that you should know about called Zepto. Straight off the website, Zepto is a minimalist JavaScript library for modern browsers with a largely jQuery compatible API. In fact, if you know jQuery, you already know how to use Zepto. So while the distinction between jQuery 1 and 2 is a departure from supporting old desktop browsers, like IE8 and below, Zepto is a much smaller file in terms of bytes and is optimized for mobile devices. What's important for you to know right now about this is, again, if you know jQuery, then you already know Zepto, and Zepto is the most appropriate for mobile web applications. Now before you dig into writing your first jQuery application, I'd like to review some coding techniques that will prove helpful to you as you continue your development.

Demo: JavaScript Function Scope

Before I wrap up this course, there's a few coding tips that I would like to share with you that I think will make your life a little bit easier and hopefully help you avoid some common bugs. Now this tip is dealing with function scope, and this really is a subject that's much broader than jQuery itself, but since we spend so much time creating anonymous functions within jQuery, I want to refresh your memory if this is something you've already learned, or introduce you to it if it's something new to you, about how function scope works in JavaScript. Now if we take a look at this variable here, name = "Craig", and then I have a function immediately after that, where logName, when I call logName, it'll log my name to the console. So let's go ahead and call this function, and when we run it on the page, you'll see that what it does is it logs my name to the console window. Now this works like this, even though the name variable is not declared anywhere within the logName function, because it's all running under the same context, and right now, these are both running in the global scope, and global scope just means that the name variable and the logName function are kind of available anywhere within the running program. So let's take a look at another example as well. Here I've pasted in a new function, and this one logs out my Twitter handle. So if I call logTwitter, and run this on the page, you'll notice that logs out my Twitter handle, but if we look carefully at this function, you'll notice that the variable for my Twitter handle is declared inside of the logTwitter function. So what would happen if I try to outside of the scope of the logTwitter function, try to report back the value of the Twitter variable? Well, let's try it and see. So now I'll refresh the page, and you'll notice that I get a reference error. It says that the twitter variable is not defined. It's because that the twitter variable is defined inside the logTwitter function, and since it's declared inside the function, once that function is done and it's out of scope, that variable goes away. So you only have access to variables that are declared within a scope that's current. So let's try one more just to drive home the point a little more clearly. So here I've pasted in another function for us to look at, so this is called logFullName. So I'm starting off with a variable called first, which has my first name, and then inside of logFullName is another function declaration, so this is called logName. Inside of there, I have a new variable called last, and that has my last name, and then I'm doing console.log and concatenating together my first name and my last name. So that defines the function and so then I just run it at the end of this function. So now let's try running logFullName and see what happens. So you'll notice that the result prints out my full name to the console, but notice what's happening here. The first name variable is declared inside the logFullName function, but then it's used inside of the logName function, and that's perfectly acceptable and perfectly expected, because it's within scope of the full logName function. So basically if you have a variable that's in scope within the function that's running, it will be available to any inner functions that are also running in that context. For more in depth study on this subject, I suggest you check out Ryan Morr's article, Understanding Scope and Context in JavaScript. Now, there's one more thing I want to leave you with, and that's a naming convention that can help you write more accurate jQuery code.

Demo: Naming Conventions

The next tip that I'd like to share with you is a variable naming convention that can help you sort out your jQuery code pretty easily just as you're looking at it. So first, let's take a look at the code that we would write to select an element on the page using just regular, everyday JavaScript. So here I've used getElementsByTagName in order to select the h2 on the page, and so what's returned here is the h2 that's found right there, the address that we've been using all throughout the course. Now you'll notice that the name of the variable that I've called it here is just simply h2. Now if I wanted to make that same type of selection using jQuery, normally when I'm writing regular production code, I would name that a little bit different, and what I'll do is prefix that with a $. So this is the selection that I would use and the variable name, so $h2 would be equal to the jQuery selector of h2. And so when we take a look at the results, of course we get the same element back, but this is a jQuery wrapped set. Now the value for this is that so I can tell by looking at my variable which one is the result of a jQuery selection and which one is the result of standard JavaScript selection. Now why would you need this? Why would you even care? Well, because in many different circumstances, sometimes you'll be dealing with raw DOM elements, and sometimes you'll be working with jQuery wrapped sets, and even the same elements at the same time, and so by using the $ prefix, it can help make your code a lot easier to understand. And in fact, earlier in the course, you saw an example of where that became valuable. If you recall, the chaining example featured code that looked a lot like this. Now you'll notice during the each function, the iterator for the each function, one of the arguments is the specific list item that's being returned as the each function is looping through those items. Well, the item in the argument is the raw list item, the raw DOM element item, and so here I've passed in that item, done the jQuery selection, and now the variable is $item. And even at the top, you'll see that the collection itself of all of the items, I've prefixed with the $items. And so you'll find different circumstances in which sometimes you're dealing with the raw DOM element, and sometimes you're working with the jQuery selected elements, and you'll want to be able to differentiate with them, and by using the prefix of the $, it can make your life a whole lot easier.

More on Pluralsight

So now that you're getting started with jQuery, what's next? Where should you go from here? What I'd like to do is recommend some other Pluralsight courses that can take you to the next level in your learning based off of what you've learned in this course. First up is jQuery Fundamentals. Now while some of the concepts found in this course are also covered in jQuery Fundamentals, the end of the jQuery Fundamentals course discusses working with Ajax and working with the server, and so going from here, if you want to learn more about working with the back-end of your web application, make sure to check out jQuery Fundamentals. From there you can watch jQuery Advanced Topics. This takes a deeper dive into the jQuery library, and gives you an opportunity to go beyond the basics and really get working into the details of the jQuery library, and as I mentioned before, CSS 3 From Scratch is a great way for you to get acquainted with CSS3 selectors, which are at the heart of using jQuery. Well, let's go ahead and wrap things up.

Summary

In this module, I set jQuery in context of the JavaScript ecosystem as a whole, and showed you where it sits in relation to a number of other JavaScript libraries. Beyond that, I shared a few coding techniques that will help you avoid errors and set you up for forming good coding habits as your development skills become more sophisticated. Once again, this is Craig Shoemaker, and I thank you very much for joining me here on Pluralsight for jQuery Getting Started. Please feel free to visit my website at craigshoemaker.net, or contact me via Twitter where I'm @craigshoemaker. Thanks again, and I hope we meet again soon.

